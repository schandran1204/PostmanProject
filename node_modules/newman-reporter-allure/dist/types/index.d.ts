/// <reference types="node" />
import type { EventEmitter } from "events";
import type { ConsoleEvent, Cursor, NewmanRunExecutionAssertion } from "newman";
import type { CollectionDefinition, Event, Item, Request, Response } from "postman-collection";
import type { ReporterConfig } from "allure-js-commons/sdk/reporter";
import { ReporterRuntime } from "allure-js-commons/sdk/reporter";
import type { PmItem, RunningItem } from "./model.js";
declare class AllureReporter {
    #private;
    allureRuntime: ReporterRuntime;
    allureConfig: ReporterConfig;
    runningItems: RunningItem[];
    currentCollection: CollectionDefinition;
    pmItemsByAllureUuid: Map<string, PmItem>;
    currentTest?: string;
    currentScope?: string;
    rootCollectionName?: string;
    constructor(emitter: EventEmitter, reporterConfig: ReporterConfig, options: {
        collection: CollectionDefinition;
    });
    registerEvents(emitter: EventEmitter): void;
    onStart(): void;
    onPrerequest(err: any, args: {
        executions: Event[];
    }): void;
    onBeforeItem(err: any, args: {
        item: Item;
        cursor: Cursor;
    }): void;
    onItem(err: any, args: {
        item: Item;
    }): void;
    onTest(err: any, args: {
        executions: Event[];
    }): void;
    onConsole(err: any, args: ConsoleEvent): void;
    onRequest(err: any, args: {
        request: Request;
        response: Response;
    }): void;
    onAssertion(err: any, args: NewmanRunExecutionAssertion): void;
    onDone(): void;
}
export default AllureReporter;
