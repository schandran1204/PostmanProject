{"version":3,"file":"index.js","names":["ContentType","Stage","Status","ReporterRuntime","createDefaultWriter","getEnvironmentLabels","getFrameworkLabel","getHostLabel","getLanguageLabel","getSuiteLabels","getThreadLabel","extractMeta","_AllureReporter_brand","WeakSet","AllureReporter","constructor","emitter","reporterConfig","options","_classPrivateMethodInitSpec","_defineProperty","Map","resultsDir","restConfig","_objectWithoutProperties","_excluded","currentCollection","collection","rootCollectionName","name","allureConfig","allureRuntime","_objectSpread","writer","registerEvents","on","onStart","bind","onBeforeItem","onItem","onPrerequest","onRequest","onTest","onAssertion","onConsole","onDone","currentScope","startScope","err","args","_args$executions$","currentTest","currentPmItem","pmItemsByAllureUuid","get","prerequest","executions","script","exec","join","pmItem","item","passed","failedAssertions","consoleLogs","itemGroup","parent","fullName","_assertClassBrand","_getFullName","call","testPath","_pathToItem","hostLabel","threadLabel","labels","events","startTest","stage","RUNNING","updateTest","test","push","set","_requestData$headers","_requestData$body","_response$headers","requestData","requestDataURL","concat","method","url","rawDescription","request","description","testDescription","content","response","responseData","requestError","_attachString","testScript","length","headers","count","writeAttachment","undefined","_headerListToJsonBuffer","contentType","JSON","body","mode","raw","Buffer","from","TEXT","parameters","value","code","toString","excluded","descriptionHtml","replace","details","_escape","status","FAILED","FINISHED","statusDetails","message","trace","errorMsg","BROKEN","PASSED","stopTest","writeTest","_args$executions$2","execScript","testArgs","error","errName","errMsg","stepUuid","startStep","stopStep","level","messages","_args$response","req","protocol","getHost","getPathWithQuery","respStream","stream","respBody","assertion","updateStep","step","stack","writeScope","forEachParent","chain","unshift","id","stringToAttach","Array","isArray","ret","all","forEach","h","key","stringify","val"],"sources":["../../src/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/unbound-method */\nimport type { EventEmitter } from \"events\";\nimport type { ConsoleEvent, Cursor, NewmanRunExecutionAssertion } from \"newman\";\nimport type { CollectionDefinition, Event, HeaderList, Item, Request, Response } from \"postman-collection\";\nimport { ContentType, Stage, Status } from \"allure-js-commons\";\nimport type { ReporterConfig } from \"allure-js-commons/sdk/reporter\";\nimport {\n  ReporterRuntime,\n  createDefaultWriter,\n  getEnvironmentLabels,\n  getFrameworkLabel,\n  getHostLabel,\n  getLanguageLabel,\n  getSuiteLabels,\n  getThreadLabel,\n} from \"allure-js-commons/sdk/reporter\";\nimport type { PmItem, RunningItem } from \"./model.js\";\nimport { extractMeta } from \"./utils.js\";\n\nclass AllureReporter {\n  allureRuntime: ReporterRuntime;\n  allureConfig: ReporterConfig;\n  runningItems: RunningItem[] = [];\n  currentCollection: CollectionDefinition;\n  pmItemsByAllureUuid: Map<string, PmItem> = new Map();\n  currentTest?: string;\n  currentScope?: string;\n  rootCollectionName?: string;\n\n  constructor(\n    emitter: EventEmitter,\n    reporterConfig: ReporterConfig,\n    options: {\n      collection: CollectionDefinition;\n    },\n  ) {\n    const { resultsDir, ...restConfig } = reporterConfig;\n\n    this.currentCollection = options.collection;\n    this.rootCollectionName = options.collection.name;\n    this.allureConfig = reporterConfig;\n    this.allureRuntime = new ReporterRuntime({\n      ...restConfig,\n      writer: createDefaultWriter({ resultsDir, emitter }),\n    });\n    this.registerEvents(emitter);\n  }\n\n  registerEvents(emitter: EventEmitter) {\n    emitter.on(\"start\", this.onStart.bind(this));\n    emitter.on(\"beforeItem\", this.onBeforeItem.bind(this));\n    emitter.on(\"item\", this.onItem.bind(this));\n    emitter.on(\"prerequest\", this.onPrerequest.bind(this));\n    emitter.on(\"request\", this.onRequest.bind(this));\n    emitter.on(\"test\", this.onTest.bind(this));\n    emitter.on(\"assertion\", this.onAssertion.bind(this));\n    emitter.on(\"console\", this.onConsole.bind(this));\n    emitter.on(\"done\", this.onDone.bind(this));\n  }\n\n  onStart() {\n    this.currentScope = this.allureRuntime.startScope();\n  }\n\n  onPrerequest(\n    err: any,\n    args: {\n      executions: Event[];\n    },\n  ) {\n    if (!this.currentTest) {\n      return;\n    }\n\n    const currentPmItem = this.pmItemsByAllureUuid.get(this.currentTest);\n\n    if (!currentPmItem) {\n      return;\n    }\n\n    currentPmItem.prerequest = args.executions[0]?.script?.exec?.join(\"\\n\");\n  }\n\n  onBeforeItem(err: any, args: { item: Item; cursor: Cursor }) {\n    const pmItem: PmItem = {\n      name: args.item.name,\n      passed: true,\n      failedAssertions: [],\n      consoleLogs: [],\n    };\n\n    const itemGroup = args.item.parent();\n    const item = args.item;\n    const fullName = this.#getFullName(item);\n    const testPath = this.#pathToItem(item);\n    const hostLabel = getHostLabel();\n    const threadLabel = getThreadLabel();\n\n    const { labels } = extractMeta(args.item.events);\n\n    this.currentTest = this.allureRuntime.startTest({\n      name: args.item.name,\n      fullName,\n      stage: Stage.RUNNING,\n      labels: [\n        getLanguageLabel(),\n        getFrameworkLabel(\"newman\"),\n        hostLabel,\n        threadLabel,\n        ...labels,\n        ...getEnvironmentLabels(),\n      ],\n    });\n\n    this.allureRuntime.updateTest(this.currentTest, (test) => {\n      test.labels.push(...getSuiteLabels(testPath));\n    });\n\n    this.pmItemsByAllureUuid.set(this.currentTest, pmItem);\n\n    if (itemGroup && this.currentCollection !== itemGroup) {\n      this.currentCollection = itemGroup;\n    }\n  }\n\n  onItem(\n    err: any,\n    args: {\n      item: Item;\n    },\n  ) {\n    if (!this.currentTest) {\n      return;\n    }\n\n    const currentPmItem = this.pmItemsByAllureUuid.get(this.currentTest);\n\n    if (!currentPmItem) {\n      return;\n    }\n\n    const requestData = currentPmItem.requestData;\n    const requestDataURL = requestData && `${requestData.method} - ${requestData.url}`;\n    const rawDescription = args.item.request.description;\n    const testDescription = (typeof rawDescription === \"string\" ? rawDescription : rawDescription?.content) || \"\";\n    const response = currentPmItem.responseData;\n    const failedAssertions = currentPmItem.failedAssertions;\n    const requestError = currentPmItem.requestError;\n\n    if (currentPmItem.prerequest) {\n      this.#attachString(\"PreRequest\", currentPmItem.prerequest);\n    }\n\n    if (currentPmItem.testScript) {\n      this.#attachString(\"TestScript\", currentPmItem.testScript);\n    }\n\n    if (currentPmItem.consoleLogs.length) {\n      this.#attachString(\"ConsoleLogs\", currentPmItem.consoleLogs);\n    }\n\n    if (requestData?.headers && requestData?.headers?.count() > 0) {\n      this.allureRuntime.writeAttachment(\n        this.currentTest,\n        undefined,\n        \"Request Headers\",\n        this.#headerListToJsonBuffer(requestData.headers),\n        {\n          contentType: ContentType.JSON,\n        },\n      );\n    }\n\n    if (requestData?.body?.mode === \"raw\" && requestData.body.raw) {\n      this.#attachString(\"Request Body\", requestData.body.raw);\n    }\n\n    if (response?.headers && response?.headers?.count() > 0) {\n      this.allureRuntime.writeAttachment(\n        this.currentTest,\n        undefined,\n        \"Response Headers\",\n        this.#headerListToJsonBuffer(response.headers),\n        {\n          contentType: ContentType.JSON,\n        },\n      );\n    }\n\n    if (response?.body) {\n      this.allureRuntime.writeAttachment(\n        this.currentTest,\n        undefined,\n        \"Response Body\",\n        Buffer.from(response.body, \"utf-8\"),\n        {\n          contentType: ContentType.TEXT,\n        },\n      );\n    }\n\n    this.allureRuntime.updateTest(this.currentTest, (test) => {\n      if (requestDataURL) {\n        test.parameters.push({\n          name: \"Request\",\n          value: requestDataURL,\n        });\n      }\n\n      if (response?.code) {\n        test.parameters.push({\n          name: \"Response Code\",\n          value: response?.code.toString(),\n          excluded: true,\n        });\n      }\n\n      if (testDescription) {\n        const descriptionHtml = testDescription.replace(/[*]/g, \"\").replace(/\\n/g, \"<br>\");\n\n        test.description = testDescription;\n        test.descriptionHtml = descriptionHtml;\n      }\n    });\n\n    if (response && failedAssertions?.length) {\n      const details = this.#escape(`Response code: ${response.code}, status: ${response.status}`);\n\n      this.allureRuntime.updateTest(this.currentTest, (test) => {\n        test.status = Status.FAILED;\n        test.stage = Stage.FINISHED;\n        test.statusDetails = {\n          message: this.#escape(failedAssertions.join(\", \")),\n          trace: details,\n        };\n      });\n    } else if (requestError) {\n      const errorMsg = this.#escape(requestError);\n\n      this.allureRuntime.updateTest(this.currentTest, (test) => {\n        test.status = Status.BROKEN;\n        test.stage = Stage.FINISHED;\n        test.statusDetails = {\n          message: errorMsg,\n        };\n      });\n    } else {\n      this.allureRuntime.updateTest(this.currentTest, (test) => {\n        test.status = Status.PASSED;\n        test.stage = Stage.FINISHED;\n      });\n    }\n\n    this.allureRuntime.stopTest(this.currentTest);\n    this.allureRuntime.writeTest(this.currentTest);\n  }\n\n  onTest(err: any, args: { executions: Event[] }) {\n    if (!this.currentTest) {\n      return;\n    }\n\n    const currentPmItem = this.pmItemsByAllureUuid.get(this.currentTest);\n\n    if (!currentPmItem) {\n      return;\n    }\n\n    const execScript = args.executions[0]?.script?.exec?.join(\"\\n\");\n\n    if (!execScript) {\n      return;\n    }\n\n    currentPmItem.testScript = execScript;\n\n    // not typed postman-collection error property ?\n    const testArgs: any = args.executions[0];\n\n    if (!testArgs.error) {\n      return;\n    }\n\n    const errName: string = testArgs.error.name;\n    const errMsg: string = testArgs.error.message;\n\n    const stepUuid = this.allureRuntime.startStep(this.currentTest, undefined, {\n      name: errName,\n      status: Status.FAILED,\n      stage: Stage.FINISHED,\n      statusDetails: {\n        message: errMsg,\n      },\n    });\n\n    if (!stepUuid) {\n      // no such test running, ignore reporting\n      return;\n    }\n\n    currentPmItem.failedAssertions.push(errName);\n\n    this.allureRuntime.stopStep(stepUuid);\n  }\n\n  onConsole(err: any, args: ConsoleEvent) {\n    if (!this.currentTest) {\n      return;\n    }\n\n    const currentPmItem = this.pmItemsByAllureUuid.get(this.currentTest);\n\n    if (!currentPmItem || err) {\n      return;\n    }\n\n    if (args.level) {\n      currentPmItem.consoleLogs.push(`level: ${args.level}, messages: ${args.messages.toString()}`);\n    }\n  }\n\n  onRequest(\n    err: any,\n    args: {\n      request: Request;\n      response: Response;\n    },\n  ) {\n    if (!this.currentTest) {\n      return;\n    }\n\n    const currentPmItem = this.pmItemsByAllureUuid.get(this.currentTest);\n\n    if (!currentPmItem) {\n      return;\n    }\n\n    const req = args.request;\n    const url = `${req.url.protocol || \"\"}://${args.request.url.getHost()}${req.url.getPathWithQuery()}`;\n\n    currentPmItem.requestData = {\n      url: url,\n      method: req.method,\n      body: req.body,\n      headers: req.headers,\n    };\n\n    if (err) {\n      currentPmItem.passed = false;\n      currentPmItem.requestError = err.message;\n    }\n\n    if (!args.response) {\n      return;\n    }\n\n    const respStream = args?.response?.stream;\n    const respBody = respStream ? Buffer.from(respStream).toString() : \"\";\n\n    currentPmItem.responseData = {\n      status: args.response.status,\n      code: args.response.code,\n      body: respBody,\n      headers: args.response.headers,\n    };\n  }\n\n  onAssertion(err: any, args: NewmanRunExecutionAssertion) {\n    if (!this.currentTest) {\n      return;\n    }\n\n    const currentPmItem = this.pmItemsByAllureUuid.get(this.currentTest);\n\n    if (!currentPmItem) {\n      return;\n    }\n\n    const stepUuid = this.allureRuntime.startStep(this.currentTest, undefined, {\n      name: args.assertion,\n    });\n    if (!stepUuid) {\n      // no such test running, ignore reporting\n      return;\n    }\n\n    this.allureRuntime.updateStep(stepUuid, (step) => {\n      if (err && currentPmItem) {\n        currentPmItem.passed = false;\n        currentPmItem.failedAssertions.push(args.assertion);\n\n        step.statusDetails = {\n          message: err.message,\n          trace: err.stack,\n        };\n        step.status = Status.FAILED;\n      } else {\n        step.status = Status.PASSED;\n      }\n\n      step.stage = Stage.FINISHED;\n    });\n\n    this.allureRuntime.stopStep(stepUuid);\n  }\n\n  onDone() {\n    if (this.currentScope) {\n      this.allureRuntime.writeScope(this.currentScope);\n      this.currentScope = undefined;\n    }\n  }\n\n  #pathToItem(item: Item): string[] {\n    if (!item || !(typeof item.parent === \"function\") || !(typeof item.forEachParent === \"function\")) {\n      return [];\n    }\n\n    const chain: string[] = [];\n\n    item.forEachParent((parent) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      chain.unshift(parent.name || parent.id);\n    });\n\n    if (this.rootCollectionName) {\n      chain.unshift(this.rootCollectionName);\n    }\n    return chain;\n  }\n\n  #getFullName(item: Item): string {\n    const chain = this.#pathToItem(item);\n\n    return `${chain.join(\"/\")}#${item.name}`;\n  }\n\n  #attachString(name: string, value: string | string[]) {\n    const stringToAttach = Array.isArray(value) ? value.join(\"\\n\") : value;\n\n    if (!stringToAttach) {\n      return;\n    }\n\n    const content = Buffer.from(stringToAttach, \"utf-8\");\n\n    this.allureRuntime.writeAttachment(this.currentTest!, undefined, name, content, {\n      contentType: ContentType.TEXT,\n    });\n  }\n\n  #headerListToJsonBuffer(headers: HeaderList) {\n    const ret: { [k: string]: any } = {};\n\n    headers.all().forEach((h) => {\n      ret[h.key] = h.value;\n    });\n\n    return Buffer.from(JSON.stringify(ret, null, 4), \"utf-8\");\n  }\n\n  #escape(val: string) {\n    return (\n      val\n        .replace(\"\\n\", \"\")\n        .replace(\"\\r\", \"\")\n        // eslint-disable-next-line @stylistic/quotes\n        .replace('\"', '\"')\n    );\n  }\n}\n\nexport default AllureReporter;\n"],"mappings":"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","ignoreList":[]}